#!/bin/bash     

### Version 5/09/2024
           

function LOG
{
if [[ -z "$2" ]]  ## "Variable is empty"
	then
         date +"%c || $1 ||" >> LogsJM/APIRename.txt
         echo "|| $1 ||"
	else
         date +"%c || $1 || $2 ||" >> LogsJM/APIRename.txt
         echo "|| $1 || $2 ||"
fi
}


function CHECK
{
if [[ -z "$nombre_TMDB" ]]
    then
        LOG "Formato no correcto, no hay nombre TMDB"
        exit 0
fi 
}


function CHECKSEARCH
{
if [[ "$titulo_TMDB" == "null" ]]
    then
        LOG "Sin resultados en TMDB"
        exit 0
fi 
}


function PATH_FILE
{
 path=$(echo "$name" | rev | cut -d"/" -f 2- | rev)
 if [[ "$path" == "$name" ]] # por si no hay path
    then
	carpeta=""
    else
	carpeta="$path""/"
 fi
 LOG "carpeta=$carpeta"
}


function MOVE
{
 if mv "$name" "$FILE";
	 then
	    LOG "Fichero Nuevo" "$FILE"
	    chmod 644 "$FILE"
         else
            LOG "ERROR" "$FILE"
 fi
}


function MONITOR  
{

# $1=Folder /Varios
# FILE=$2   Viene de las funciones anteriores

NUEVO=$(echo "$FILE" | awk -F"/" '{print $NF}')
FILEmonitor="$1$NUEVO"

 if test -f "$FILEmonitor" 
	then
	   date +"%c || Fichero $FILEmonitor existe ||" >> LogsJM/APIRename.txt 
	   echo "|| Fichero $FILEmonitor existe ||"
	else
	    if  mv "$FILE" "$FILEmonitor";
		    then
			date +"%c || Fichero movido || $FILEmonitor ||" >> LogsJM/APIRename.txt
			echo "|| Fichero movido || $FILEmonitor ||"
			echo
		    else
			date +"%c || ERROR ||" >> LogsJM/APIRename.txt
			echo "|| ERROR ||"
			echo
	    fi
fi
}


############  Formatos Episodios  ##################

function S01E01
{
   parte1=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="(S[0-9][0-9]E[0-9][0-9])" '{print $1}')
   parte2=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="(S[0-9][0-9]E[0-9][0-9])" '{print $2}')

   if [[ -z $parte1 ]]    ## "Variable is empty"
       then
          season_episode=$(echo "$name" | awk -F "/" '{print $NF}' | sed s/"$parte2"//g) 
       else
          season_episode=$(echo "$name" | awk -F "/" '{print $NF}' | sed s/"$parte1"//g | sed s/"$parte2"//g) 
   fi

   season=$(echo "$season_episode" | awk '{print substr($0,2,2)}')
   episode=$(echo "$season_episode" | awk '{print substr($0,5,2)}')

   LOG "season=$season" "episode=$episode" 
}


function 1x01
{
   parte1=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="([0-9][x-X][0-9][0-9])" '{print $1}')
   parte2=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="([0-9][x-X][0-9][0-9])" '{print $2}')
   ####
   if [[ -z $parte1 ]]
       then
          season_episode=$(echo "$name" | awk -F "/" '{print $NF}' | sed s/"$parte2"//g) 
       else
          season_episode=$(echo "$name" | awk -F "/" '{print $NF}' | sed s/"$parte1"//g | sed s/"$parte2"//g) ### 2x03 
   fi
   ####
   season=$(echo "$season_episode" | awk '{print substr($0,1,1)}')
   episode=$(echo "$season_episode" | awk '{print substr($0,3,2)}')
   season_episode=S0"$season"E"$episode"

   LOG "season=$season" "episode=$episode"
}


function 01x01
{
   parte1=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="([0-9][0-9][x-X][0-9][0-9])" '{print $1}')
   parte2=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="([0-9][0-9][x-X][0-9][0-9])" '{print $2}')
   ####
   if [[ -z $parte1 ]]
       then
          season_episode=$(echo "$name" | awk -F "/" '{print $NF}' | sed s/"$parte2"//g) 
       else
          season_episode=$(echo "$name" | awk -F "/" '{print $NF}' | sed s/"$parte1"//g | sed s/"$parte2"//g)  
   fi
   ####
   season=$(echo "$season_episode" | awk '{print substr($0,2,2)}')
   episode=$(echo "$season_episode" | awk '{print substr($0,5,2)}')
   season_episode=S"$season"E"$episode"
   
   LOG "season=$season" "episode=$episode"
}

####################################################


function Pelicula
{

							#quitamos extension      #quitamos carateres raros                                 ## aÃ±o (XXXX)
nombre_TMDB=$(echo "$name" | awk -F"/" '{print $NF}' | sed 's/\.[^.]*$//' | sed 's/\.\|\[\|\]\|\_\|(\|)\|\-/\ /g' | awk -v FS="(\ [0-9][0-9][0-9][0-9]\ )|([0-9][0-9][0-9][0-9]p)|([0-9][0-9][0-9]p)" '{ print $1 }' | awk -F"4K|BD|MicroHD|DVD|M1080|BluRay|Cam|www" '{print $1}' | sed 's/\([a-zA-Z]\)\([0-9]\)/\1 \2/'| sed 's/\ /+/g' | sed 's/+\+$//')  # sed 's/\([A-Z]\)/ \1/g' 
					#Separamos letras y numeros                                             #Separamos mayusculas

year_TMDB=$(echo "$name" | awk -F"/" '{print $NF}' |  grep -oP '\d{4}(?=\.)|\d{4}(?=\))' | grep -v 1080 | grep -v 2160 | head -n 1) # primera fecha por si acaso

CHECK

if [[ -z "$year_TMDB" ]]  ## variable is empty
	then
	 curl -s "https://api.themoviedb.org/3/search/movie?api_key=2c0b5982e078e255ed5be3bba4c3064b&query=$nombre_TMDB&language=es" | jq -r '.results[0] | .title,.release_date,.original_title,.vote_average' > ttt.txt
	else
	 curl -s "https://api.themoviedb.org/3/search/movie?api_key=2c0b5982e078e255ed5be3bba4c3064b&query=$nombre_TMDB+$year_TMDB&language=es" | jq -r '.results[0] | .title,.release_date,.original_title,.vote_average' > ttt.txt
	 titulo_TMDB=$(sed -n 1p ttt.txt)
	 if [[ "$titulo_TMDB" == "null" ]]
		 then
		     curl -s "https://api.themoviedb.org/3/search/movie?api_key=2c0b5982e078e255ed5be3bba4c3064b&query=$nombre_TMDB&language=es" | jq -r '.results[0] | .title,.release_date,.original_title,.vote_average' > ttt.txt
         fi 
fi


titulo_TMDB=$(sed -n 1p ttt.txt)
date_TMDB=$( sed -n 2p ttt.txt | awk -F"-" '{print $1}')
titulo_original=$(sed -n 3p ttt.txt)
nota_TMDB=$(sed -n 4p ttt.txt); nota_TMDB=$(echo "scale=0; $nota_TMDB*10/1" | bc)

CHECKSEARCH


LOG "Titulo original || $titulo_original" "$titulo_TMDB"

echo "|| Checking Mediainfo ||"

#### MEDIAINFO ####
medianame=$(mediainfo echo "$name" | sed 's/\ /\\\ /g' | sed 's/\&/\\&/g' | sed s/\(/\\\\\(/g | sed s/\)/\\\\\)/g | grep -e ^Height -e ^Original | awk -F":" '{print $2}')

pixelsmediainfo=$(echo "$medianame" | awk -F"pixels" '{print $1}' | sed s/\\\\\ //g | sed -n 1p)
       if [[ "$pixelsmediainfo" -lt 800 ]]
           then
              pixelsmediainfo="<800"
              formato="Rip"
           else
              if  [[ "$pixelsmediainfo" -ge 800 ]] && [[ "$pixelsmediainfo" -lt 1080 ]]
                 then
                   formato="Rip" ##pixels se queda como esta##
                 else
                   if [[ "$medianame" == *Blu-ray* ]]
                      then
                        formato="Blu-ray"
                      else
			  if  [[ "$medianame" == *DVD* ]]
				  then
					  formato="DVD"
				  else
					  if  [[ "$pixelsmediainfo" -gt 1080 ]] && [[ "$pixelsmediainfo" -lt 2160 ]]
						  then
							  formato="Rip"
						  else
							  formato="Remux"
					  fi
                          fi
                  fi
             fi
        fi


ext=$(echo "$name" | awk -F"/" '{print $NF}'); ext=${ext: -3}
FILE=""$carpeta""$titulo_TMDB" ("$date_TMDB") "$pixelsmediainfo"p "$formato"."$ext""

LOG "Renombrando" "$FILE"

MOVE

rm ttt.txt

}



function Episodio
{


nombre_TMDB=$(echo "$name" | awk -F"/" '{print $NF}' | sed 's/\.[^.]*$//' | sed 's/\.\|\[\|\]\|\_\|(\|)\|\-/\ /g'  | awk -v FS="(\([0-9][0-9][0-9][0-9]\))" '{print $1}'  | awk -v FS="(S[0-9][0-9]E[0-9][0-9])" '{print $1}'  | awk -F"Temporada" '{print $1}' | awk -v FS="([0-9][x-X][0-9][0-9])" '{print $1}' | awk -v FS="([0-9][0-9][x-X][0-9][0-9])" '{print $1}' | awk -v FS="HDTV" '{print $1}' | awk -v FS="Cap [0-9][0-9][0-9]" '{print $1}' | sed 's/\ /+/g' | sed 's/+\+$//')

year_TMDB=$(echo "$name" | awk -F"/" '{print $NF}' |  grep -oP '\d{4}(?=\.)|\d{4}(?=\))')

CHECK

if [[ -z "$year_TMDB" ]]  ## variable is empty
	then
	 curl -s "https://api.themoviedb.org/3/search/tv?api_key=2c0b5982e078e255ed5be3bba4c3064b&language=es&query=$nombre_TMDB" | jq -r '.results[0] | .id,.name,.first_air_date,.original_name' > ttt.txt
	else
	 curl -s "https://api.themoviedb.org/3/search/tv?api_key=2c0b5982e078e255ed5be3bba4c3064b&language=es&query=$nombre_TMDB+$year_TMDB" | jq -r '.results[0] | .id,.name,.first_air_date,.original_name' > ttt.txt	
	 titulo_TMDB=$(sed -n 1p ttt.txt)
	 if [[ "$titulo_TMDB" == "null" ]]
		 then
			  curl -s "https://api.themoviedb.org/3/search/tv?api_key=2c0b5982e078e255ed5be3bba4c3064b&language=es&query=$nombre_TMDB" | jq -r '.results[0] | .id,.name,.first_air_date,.original_name' > ttt.txt
         fi 

fi


titulo_TMDB=$(sed -n 1p ttt.txt)                         #110492
serie_TMDB=$(sed -n 2p ttt.txt)                          #El Pacificador
date_TMDB=$(sed -n 3p ttt.txt | awk -F"-" '{print $1}')  #2022-01-13
serie_original=$(sed -n 4p ttt.txt)                      #Peacemaker

CHECKSEARCH

LOG "Serie Titulo original: $serie_original" "$serie_TMDB"

#### temporada y episodio - ambos formatos####
formato_serie=$(echo "$name" | awk -F"/" '{print $NF}' | grep -e 'S[0-9][0-9]E[0-9][0-9]' -e '[0-9][x-X][0-9][0-9]' -e '[0-9][0-9][x-X][0-9][0-9]')

if [[ -z $formato_serie ]] # Empty #
	then
           season=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="(Cap|])" '{print $3}' |  awk '{print substr($0,2,1)}')     #.103
	   episode=$(echo "$name" | awk -F "/" '{print $NF}' | awk -v FS="(Cap|])" '{print $3}' |  awk '{print substr($0,3,2)}')    #.103
           season_episode=S0"$season"E"$episode"
	   LOG "$season_episode" 
        else
		if [[ $formato_serie ==  *[0-9][xX][0-9][0-9]* ]]
	          then
                        1x01
			LOG "Camino XxXX"
		  else
			S01E01
			LOG "Camino SXXEXX"
		fi
fi

pixels=$(mediainfo echo "$name" | grep -e ^Height -e ^Original | awk -F":" '{print $2}'  | awk -F"pixels" '{print $1}' | sed s/\ //g | sed -n 1p)
formato=$(mediainfo echo "$name" | grep -e ^Height -e ^Original | awk -F":" '{print $2}'  | awk -F"pixels" '{print $1}' | sed s/\ //g | sed -n 2p)

titulo_ep_nuevo=$(curl -s "https://api.themoviedb.org/3/tv/$titulo_TMDB/season/$season/episode/$episode?api_key=2c0b5982e078e255ed5be3bba4c3064b&language=es" | jq -r '.name')
ext=$(echo "$name" | awk -F"/" '{print $NF}'); ext=${ext: -3}
FILE=""$carpeta""$serie_TMDB" ("$date_TMDB") - "$season_episode" - "$titulo_ep_nuevo" ("$pixels"p)."$ext"" 

LOG "Renombrando" "$FILE"

MOVE

rm ttt.txt

}

 
############ MAIN #############

while getopts "e:c:p:h:m" option
do
  case $option in
    c) carpeta=("$OPTARG");  opt=0; LOG "Carpeta seleccionada";;
    e) episodio=("$OPTARG"); opt=1; LOG "Episodio seleccionado" "$OPTARG";;
    p) pelicula=("$OPTARG"); opt=2; LOG "Pelicula seleccionada" "$OPTARG";;
    m) monitor=1;                   LOG "Monitor seleccionado";;
    *)  echo "Usar:";
	echo "  -e Episodios sueltos (UbicaciÃ³n)";
	echo "  -c Carpeta (-c Downloads/ -e Ted)"; 
	echo "  -p Peliculas (UbicaciÃ³n)";
	echo "  -m Script Monitor";;
  esac
done


      ## -p ## pelicula

if [[ $opt == 2 ]]
        then
	   find "$pelicula" -name "*.avi" -o -name "*.mkv" -o -name "*.mp4" | while read -r name ### $name de la pelicula
              do 
		 #LOG "Fichero" "$name" 		 
		 PATH_FILE
		 Pelicula
		 if [[  $monitor = 1 ]]
                    then
		       MONITOR HDD/Varios_Monitor/
		 fi
               done
	    GET http://192.168.1.48:32400/library/sections/2/refresh?X-Plex-Token=vNPXH9_dPaA46GFyTCgP  ## Varios
fi

      ## -e ## episodio

if [[ $opt == 1 ]]
        then
	    find "$episodio" -name "*.avi" -o -name "*.mkv" -o -name "*.mp4" | while read -r name    ### Episodio
               do 
                 #LOG "Fichero" "$name" 
		 PATH_FILE
		 Episodio
		 if [[  $monitor = 1 ]]
                    then
		       MONITOR HDD/Series_Monitor/
		 fi
	       done
	   GET http://192.168.1.48:32400/library/sections/1/refresh?X-Plex-Token=vNPXH9_dPaA46GFyTCgP  ## Series
fi
